@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json;
@using System.Web;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using WebProject.Services;
@using WebProject.Database
@inject TwitchMessageService MessageService
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager navigationmanager
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http

@{
	if (!loggedIn)
	{
		<a href="https://id.twitch.tv/oauth2/authorize?client_id=nh9fdpt11gna9n0ihq0001bzjwdxxq&redirect_uri=https://localhost:44363&response_type=token">
			<button class="btn btn-success">Login with Twitch</button>
		</a>
	}
	else if (!chatConnected)
	{
		<div>
			<button @onclick="(e => JoinChannel(user))" class="btn btn-success">Join Channel</button>
		</div>
	}
	else
	{
		<h5>Logged in as: @user</h5>
	}
}

@code {
	public TwitchResponseContainer? userInfo;
	public string user;

	public bool loggedIn = false;
	public bool chatConnected = false;

	protected override async Task OnInitializedAsync()
	{
		var Uri = new Uri($"{navigationmanager.Uri.Replace('#', '?')}");
		var userToken = HttpUtility.ParseQueryString(Uri.Query).Get("access_token");

		if (userToken != null)
		{
			var request = new HttpRequestMessage(HttpMethod.Get, "https://api.twitch.tv/helix/users");
			request.Headers.Add("Client-ID", "nh9fdpt11gna9n0ihq0001bzjwdxxq");
			request.Headers.Add("Authorization", $"Bearer {userToken}");

			var client = ClientFactory.CreateClient();

			var response = await client.SendAsync(request);

			if (response.IsSuccessStatusCode)
			{
				var responseStream = await response.Content.ReadAsStringAsync();
				if (!string.IsNullOrEmpty(responseStream))
				{
					userInfo = JsonSerializer.Deserialize<TwitchResponseContainer>(responseStream);
					await ProtectedSessionStore.SetAsync("userId", userInfo.data[0].id);
					await ProtectedSessionStore.SetAsync("userName", userInfo.data[0].login);
					await ProtectedSessionStore.SetAsync("displayName", userInfo.data[0].display_name);
					await ProtectedSessionStore.SetAsync("userToken", userToken);

					using (var context = new PyRZyDB())
					{
						if (context.GlobalUsers.FirstOrDefault(x => x.TwitchId == Int32.Parse(userInfo.data[0].id)) == null)
						{
							var user = new GlobalUsers(Int32.Parse(userInfo.data[0].id), userInfo.data[0].display_name);
							context.Add(user);
							context.SaveChanges();
						}

						if (context.ChannelInfo.FirstOrDefault(x => x.ChannelId == userInfo.data[0].id) != null)
						{
							chatConnected = true;
						}
					}
					loggedIn = true;
				}
			}
		}
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (!firstRender)
			OnLogin();
	}

	async void OnLogin()
	{
		var sessionUser = await ProtectedSessionStore.GetAsync<string>("displayName");
		if (sessionUser.Success)
		{
			user = sessionUser.Value;
		}

		StateHasChanged();
	}

	async void JoinChannel(string channel)
	{
		if (!loggedIn)
			return;
		await MessageService.SendMessage("pyrzybot", $"!join {channel}");
	}

	public class TwitchResponseContainer
	{
		public List<TwitchResponse> data { get; set; }
	}
	public class TwitchResponse
	{
		public string id { get; set; }
		public string login { get; set; }
		public string display_name { get; set; }
		public string type { get; set; }
		public string broadcaster_type { get; set; }
		public string description { get; set; }
		public string profile_image_url { get; set; }
		public string offline_image_url { get; set; }
		public int view_count { get; set; }
		public DateTime created_at { get; set; }
	}
}
